# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GX6nfgBaaHvF9nQZL6XoraoYmgSWog4e
"""

import numpy as np              
import matplotlib.pyplot as plt 
def quantize_uniform(x, quant_min=-1, quant_max=1, quant_level=5):

    x_normalize = (x-quant_min) * (quant_level-1) / (quant_max-quant_min)
    x_normalize[x_normalize > quant_level - 1] = quant_level - 1
    x_normalize[x_normalize < 0] = 0
    x_normalize_quant = np.around(x_normalize)
    x_quant = (x_normalize_quant) * (quant_max-quant_min) / (quant_level-1) + quant_min
    return x_quant

N=15                                   
f0=600.0                             
fs=1500.0                             
k=np.arange(N)                       
x=np.sin(2*np.pi*(f0/fs)*k)      
num_levels=50                  

plt.figure(figsize=[12, 4])     
t=np.linspace(0, N/fs, num=1024)        

plt.plot(t, np.sin(2*np.pi*f0*t), 'g', label='аналоговый сигнал $x(t)$')  
                                   

plt.stem(k/fs, x, 'b', 'bo', label='дискретизованный сигнал $x[k]$')            
                                        

plt.grid()                              
plt.xlabel("$t$, c")                    
plt.ylabel("$x(t), x[k]$")              
plt.title("Аналоговый и дискретизованный сигналы") 
plt.legend(loc='best', bbox_to_anchor=(1, 1))
plt.tight_layout()

y=quantize_uniform(x, quant_min=-1, quant_max=1, quant_level=num_levels)
bins=np.linspace(-1, 1, num_levels)

plt.figure(figsize=[12, 4])               
t=np.linspace(0, N/fs, num=1024)          
plt.plot(t, np.sin(2*np.pi*f0*t), 'g', label='аналоговый сигнал $x(t)$')        
                                         

plt.stem(k/fs, y, 'b', 'bo', label='цифровой сигнал $y[k]$')                
                                       
                                  
if num_levels<21:                 
    plt.yticks(bins)                     

plt.grid()                               
plt.xlabel("$t$, c")                       
plt.ylabel("$x(t), y[k]$")                 
plt.title("Аналоговый и цифровой сигналы")
plt.legend(loc='best', bbox_to_anchor=(1, 1))
plt.tight_layout()

print(abs(x-y))

plt.figure(figsize=[12, 4])
plt.title("Ошибка квантования") 
plt.plot(t, np.sin(2*np.pi*f0*t), 'g', label='аналоговый сигнал $x(t)$')
plt.stem(k/fs, abs(x-y), 'm', 'mo', label="абсолютная ошибка \nквантования \n$\\epsilon[k]=|x[k]-y[k]|$")       
                                      
plt.yticks(bins)
plt.grid()
plt.xlabel("$t$, c")                                         
plt.ylabel("$x(t), \\varepsilon[k]=|x[k]-y[k]|$")             
plt.legend(loc='best', bbox_to_anchor=(1, 1))
plt.tight_layout() 
plt.show()